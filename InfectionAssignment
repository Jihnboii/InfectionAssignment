
//test comment
import java.util.Scanner;
import java.util.Random;
import java.lang.Math;
import java.io.FileWriter;
import java.io.IOException;


public class InfectionAssignment {
       
   // Create Log
   public static FileWriter createLog() {
       FileWriter file;
	   try {
	      file = new FileWriter(System.getProperty("user.dir") + "/log.txt", true);
	      file.write("Log\n---------\n\n");
	      file.flush();
	   } 
	   catch (IOException e) {
	      System.out.println("An error occurred in creating Log.");
	      e.printStackTrace();
	      return null;
	   }
	   return file;
   }

   // Append Timestep to Log
   public static void appendLog(FileWriter file, char[][] grid, int timestep) {
	   try {
         file.write("Timestep " + timestep + ":\n\n");
         for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
               char c = grid[i][j];
               file.write(c + " ");
            }
            file.write("\n");
         }
         file.write("\n");
         file.flush();
	   } 
	   catch (IOException e) {
	      System.out.println("An error occurred in appending Log.");
	      e.printStackTrace();
	   }
   }

   // Biased Random Generator (returns true/false)
   public static boolean biasedRand(double prob) {
      double n = Math.random();
      if (n <= prob) return true;
      else return false;
   }

   //checks if num of individuals is a perfect square
   public static int isPerfectSquare(int num) {
      Scanner scnr = new Scanner(System.in);
      while (num % Math.sqrt(num) != 0) {
          System.out.println("Enter the number of individuals (Must be a perfect square): ");
          num = scnr.nextInt();
      }
      return num;
  }
  
   //fills the array with individual, only used once
   public static Individual[][] fillGrid(int individuals, double infectionRate, double recoveryRate)
   {
      //creates a 2D array of the Individual object
      Individual[][] individualArr = new Individual[(int)Math.sqrt(individuals)][(int)Math.sqrt(individuals)];
      //fills the 2D array with individual objects
      for(int i = 0; i < individualArr.length; i++)
      {
         for(int j = 0; j < individualArr[i].length; j++)
         {
            //creates each individual as Susceptible 
            individualArr[i][j] = new Individual('S', infectionRate, recoveryRate);
         }
      }
      return individualArr;
   }

   //randomly selects an individual to get infected
   public static int[] chooseAnInfected(int individuals)
   {
      Random randGen = new Random();
      // creates an array of size 2 for the ordered pair
      int[] infectedLocation = new int[2];
      //fills the array with two values, one for the x coordinate of the grid and another for the y coordinate of the grid
      infectedLocation = { randGen.nextInt((int)Math.sqrt(individuals)), randGen.nextInt((int)Math.sqrt(individuals)) };
      return infectedLocation;
      
   }

   // WORK ON LATER
   // public static char[][] fillArrayWithStatus(int individuals)
   // {
   //    for(int i = 0; i < Math.sqrt(individuals); i++)
   //    {
   //       for(int j = 0; j < Math.sqrt(individuals); j++)
   //       {
   //          charArray[i][j] = individualArray[i][j].getStatus();
   //       }
   //    }
   // } 
   // 
   
   //checks the num of neighbors of all suscept, infect
   public static int checkNumNeighbors(char[][] grid, int[] location, )
   {
      //checks for all 4 ssides of the person
      for(int i = 0; i < 4; i++)
      {
      
      }
   }

   public static void main (String [] args) {
      //variables
      int individuals;
      int timeSteps;
      double infectionRate;
      double recoveryRate;
      //is static so other methods can access the scanner
      static Scanner scnr = new Scanner(System.in);

      //gets input from user for num of individuals in the grid, the argument is 2 because 2 is not a perfect square and prompts the user to input a value
      individuals = isPerfectSquare(2);
      //gets input from user for num of time steps
      System.out.println("Enter the number of time steps:");
      timeSteps = scnr.nextInt();
      
      System.out.println("Enter the infection rate (must be between 0 and 0.25 inclusive): ");
      infectionRate = scnr.nextDouble();
      System.out.println("Enter the recovery rate (must be between 0 and 1 inclusive): ");
      recoveryRate = scnr.nextDouble();

      Individual[][] individualArr = fillGrid(individuals, infectionRate, recoveryRate);
      int patientZeroIndex = chooseAnInfected(individuals);
      individualArr[patientZeroIndex[0]][patientZeroIndex[1]].setStatus('I');
      
      //repeated steps at each time stamp
      for (int i = 0; i < timeSteps; i++){
         
         //iterating through each person in the Individual Array
         for(int j = 0; j < Math.sqrt(individuals); j++){

            for(int k = 0; k < Math.sqrt(individuals); k++){
               

            }

         }
         
   
      }

      
   }
}
